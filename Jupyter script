# District Summary
total_schools = schools_df["School ID"].nunique()
total_students = students_df["Student ID"].nunique()
total_budget = schools_df["budget"].sum()
average_math_score = students_df["math_score"].mean()
average_reading_score = students_df["reading_score"].mean()

# Calculate the percentage passing for math, reading, and overall
passing_math = students_df[students_df["math_score"] >= 70]["Student ID"].count() / total_students * 100
passing_reading = students_df[students_df["reading_score"] >= 70]["Student ID"].count() / total_students * 100
overall_passing = students_df[(students_df["math_score"] >= 70) & (students_df["reading_score"] >= 70)]["Student ID"].count() / total_students * 100

# Create a district summary DataFrame
district_summary = pd.DataFrame({
    "Total Schools": [total_schools],
    "Total Students": [total_students],
    "Total Budget": [total_budget],
    "Average Math Score": [average_math_score],
    "Average Reading Score": [average_reading_score],
    "% Passing Math": [passing_math],
    "% Passing Reading": [passing_reading],
    "% Overall Passing": [overall_passing]
})

# School Summary
school_types = schools_df.set_index("school_name")["type"]
per_school_counts = students_df["school_name"].value_counts()
per_school_budget = schools_df.groupby("school_name")["budget"].first()
per_student_budget = per_school_budget / per_school_counts
average_math_scores = students_df.groupby("school_name")["math_score"].mean()
average_reading_scores = students_df.groupby("school_name")["reading_score"].mean()

# Calculate the percentage passing for math, reading, and overall for each school
passing_math_by_school = students_df[students_df["math_score"] >= 70].groupby("school_name")["Student ID"].count() / per_school_counts * 100
passing_reading_by_school = students_df[students_df["reading_score"] >= 70].groupby("school_name")["Student ID"].count() / per_school_counts * 100
overall_passing_by_school = students_df[(students_df["math_score"] >= 70) & (students_df["reading_score"] >= 70)].groupby("school_name")["Student ID"].count() / per_school_counts * 100

# Create a school summary DataFrame
per_school_summary = pd.DataFrame({
    "School Type": school_types,
    "Total Students": per_school_counts,
    "Total School Budget": per_school_budget,
    "Per Student Budget": per_student_budget,
    "Average Math Score": average_math_scores,
    "Average Reading Score": average_reading_scores,
    "% Passing Math": passing_math_by_school,
    "% Passing Reading": passing_reading_by_school,
    "% Overall Passing": overall_passing_by_school
})

# Highest-Performing Schools
top_schools = per_school_summary.sort_values("% Overall Passing", ascending=False).head(5)

# Lowest-Performing Schools
bottom_schools = per_school_summary.sort_values("% Overall Passing").head(5)

# Math Scores by Grade
math_scores_by_grade = pd.pivot_table(students_df, values='math_score', index='school_name', columns='grade', aggfunc='mean')

# Reading Scores by Grade
reading_scores_by_grade = pd.pivot_table(students_df, values='reading_score', index='school_name', columns='grade', aggfunc='mean')

# Scores by School Spending
spending_bins = [0, 585, 630, 645, 680]
labels = ["<$585", "$585-630", "$630-645", "$645-680"]
per_school_summary["Spending Ranges (Per Student)"] = pd.cut(per_student_budget, bins=spending_bins, labels=labels)

spending_summary = per_school_summary.groupby("Spending Ranges (Per Student)").agg({
    "Average Math Score": "mean",
    "Average Reading Score": "mean",
    "% Passing Math": "mean",
    "% Passing Reading": "mean",
    "% Overall Passing": "mean"
})

# Scores by School Size
size_bins = [0, 1000, 2000, 5000]
labels = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]
per_school_summary["School Size"] = pd.cut(per_school_counts, bins=size_bins, labels=labels)

size_summary = per_school_summary.groupby("School Size").agg({
    "Average Math Score": "mean",
    "Average Reading Score": "mean",
    "% Passing Math": "mean",
    "% Passing Reading": "mean",
    "% Overall Passing": "mean"
})

# Scores by School Type
type_summary = per_school_summary.groupby("School Type").agg({
    "Average Math Score": "mean",
    "Average Reading Score": "mean",
    "% Passing Math": "mean",
    "% Passing Reading": "mean",
    "% Overall Passing": "mean"
})
